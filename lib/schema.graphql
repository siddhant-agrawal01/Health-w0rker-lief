scalar DateTime

type User {
  id: String!
  name: String!
  email: String!
  role: String!
  hospital: Hospital
  shifts: [Shift]
}

type Hospital {
  id: String!
  name: String!
  latitude: Float!
  longitude: Float!
  radius: Float!
  users: [User]
}

type Shift {
  id: String!
  userId: String!
  user: User
  startTime: DateTime!
  endTime: DateTime
  latitude: Float!
  longitude: Float!
  note: String
}

type Query {
  users: [User]
  user(id: String!): User
  hospitals: [Hospital]
  hospital(id: String!): Hospital
  shifts(where: ShiftWhereInput): [Shift]  # Add the where argument
  shift(id: String!): Shift
}

type Mutation {
  createUser(name: String!, email: String!, role: String!, hospitalId: String): User
  createHospital(name: String!, latitude: Float!, longitude: Float!, radius: Float!): Hospital
  createShift(userId: String!, startTime: DateTime!, latitude: Float!, longitude: Float!, note: String): Shift
  updateShift(id: String!, endTime: DateTime, note: String): Shift
}

input ShiftWhereInput {
  userId: String
  endTime: DateTime
  endTime_not: DateTime
}